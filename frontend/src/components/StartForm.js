import React, { useState } from 'react';
import { startInterview } from '../api';
import { useInterview } from '../context/InterviewContext';
import {
  Container,
  TextField,
  Typography,
  Box,
  AppBar,
  Toolbar,
  MenuItem,
  FormHelperText,
} from '@mui/material';
import { LoadingButton } from '@mui/lab'; 

export default function StartForm() {
  const [jobRole, setJobRole] = useState('');
  const [candidateId, setCandidateId] = useState('');
  const [loading, setLoading] = useState(false);
  const { updateInterviewData, setSessionId } = useInterview();

  const handleStart = async (e) => {
    e.preventDefault();
    if (!jobRole || !candidateId) {
      alert('Please enter both Job Role and Candidate ID.');
      return;
    }

    setLoading(true); 
    try {
      const data = await startInterview(jobRole, candidateId);
      setSessionId(data.session_id);
      updateInterviewData(data);
    } catch (error) {
      console.error('Error starting interview:', error);
      alert('Failed to start interview. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const jobRoles = [
    "Software Engineer",
    "Product Manager",
    "Data Scientist",
    "Computer Vision Engineer"
  ];

  return (
    <Box sx={{ flexGrow: 1 }}>
      <AppBar position="static">
        <Toolbar>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            Interview Application
          </Typography>
        </Toolbar>
      </AppBar>
      <Container maxWidth="sm" sx={{ mt: 4 }}>
        <Box component="form" onSubmit={handleStart} sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
          <Typography variant="h5" component="h2" gutterBottom>
            Start New Interview
          </Typography>

          <TextField
            select
            label="Job Role"
            variant="outlined"
            fullWidth
            value={jobRole}
            onChange={(e) => setJobRole(e.target.value)}
            required
            disabled={loading}
          >
            {jobRoles.map((option) => (
              <MenuItem key={option} value={option}>
                {option}
              </MenuItem>
            ))}
          </TextField>

          <TextField
            label="Candidate ID"
            variant="outlined"
            fullWidth
            value={candidateId}
            onChange={(e) => setCandidateId(e.target.value)}
            required
            disabled={loading} 
          />

          <FormHelperText sx={{ mt: -2, mb: 2 }}>
             NB : Candidate ID can be anything. In deployment, this can be generated by the backend and can be used to block re-attempts to an interview
          </FormHelperText>

          <LoadingButton
            variant="contained"
            type="submit"
            size="large"
            loading={loading} 
            loadingPosition="start" 
          >
            Start Interview
          </LoadingButton>
        </Box>
      </Container>
    </Box>
  );
}